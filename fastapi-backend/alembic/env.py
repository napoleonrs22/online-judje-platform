"""Alembic configuration file."""

from logging.config import fileConfig
import os  # üî• –ù–£–ñ–ï–ù –ò–ú–ü–û–†–¢ OS
import  sys
sys.path.append(os.getcwd())
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context

from src.database import Base
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∑–¥–µ—Å—å
from src.models.db_models import Problem, Submission, TestCase, Example  # –£–¥–∞–ª–∏–ª User, —Ç.–∫. –µ–≥–æ –Ω–µ—Ç –≤ db_models

# this is the Alembic Config object
config = context.config

if config.config_file_name is not None:
    fileConfig(config.config_file_name)

target_metadata = Base.metadata


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode."""
    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    url = os.environ.get("DATABASE_URL", config.get_main_option("sqlalchemy.url"))

    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ alembic.ini
    section = config.get_section(config.config_ini_section, {})

    # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–ï–†–ï–ó–ê–ü–ò–°–¨ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–∑ Docker Compose.
    target_url = os.environ.get("DATABASE_URL")
    if target_url:
        section['sqlalchemy.url'] = target_url

    connectable = engine_from_config(
        section,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()