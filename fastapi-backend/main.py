# fastapi-backend/main.py

import uuid
import re
import hashlib
from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware
from sqlalchemy.future import select  # üî• –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ---
from src.database import init_db, AsyncSessionLocal  
from src.api.teacher_router import teacher_router
from src.api.student_router import student_router
from src.api.auth_router import auth_router
from src.api.user_router import users
from src.api.admin_router import router
# üî• –ò–ú–ü–û–†–¢ ORM-–º–æ–¥–µ–ª–∏ User
from src.models.user_models import User
from src.models import base as models_base  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'base' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Enum'–∞–º

# --- –ö–û–ù–°–¢–ê–ù–¢–ê ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID, —á—Ç–æ –∏ –≤ —Ä–æ—É—Ç–µ—Ä–∞—Ö (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏)
TEMP_TEACHER_ID = uuid.UUID('11111111-1111-1111-1111-111111111111')
# -----------------

app = FastAPI(title="–û–ª–∏–º–ø–∏–∞–¥–Ω—ã–π –ë—ç–∫–µ–Ω–¥ (FastAPI)", version="0.1.0")

origins = ["*"]  # –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# =======================================================

async def create_temp_user():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É—á–∏—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    async with AsyncSessionLocal() as session:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        stmt = select(User).where(User.id == TEMP_TEACHER_ID)
        result = await session.execute(stmt)
        user = result.scalars().first()

        if user is None:
            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID-–∑–∞–≥–ª—É—à–∫–æ–π
            temp_user = User(
                id=TEMP_TEACHER_ID,
                email="temp.teacher@example.com",
                username="temp_teacher",
                # –ò–º–∏—Ç–∞—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å!)
                hashed_password=hashlib.sha256(b"password123").hexdigest(),
                role="teacher"
            )
            session.add(temp_user)
            await session.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {TEMP_TEACHER_ID}")
        else:
            print(f"‚òëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TEMP_TEACHER_ID} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@app.on_event("startup")
async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()  # –°–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è users)
    await create_temp_user()  # üî• –í–´–ó–´–í–ê–ï–ú –§–£–ù–ö–¶–ò–Æ
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")


# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ generate_slug)
def generate_slug(title: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL-friendly slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –æ–±—Ö–æ–¥–æ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—ã."""
    slug = title.lower()
    slug = re.sub(r'[^a-z0-9]+', '-', slug)
    slug = slug.strip('-')

    if not slug:
        return 'problem-' + str(uuid.uuid4())[:8]

    return slug

app.include_router(auth_router)
app.include_router(teacher_router)
app.include_router(student_router)
app.include_router(users)
app.include_router(router)
