# ============== src/core/security.py ==============

from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import JWTError, jwt
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from uuid import UUID
from typing import List, Union

from ..database import get_db
from ..repository.user_repository import UserRepository
from ..models.user_models import User

security = HTTPBearer()

# ‚ö†Ô∏è TODO: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ .env —Ñ–∞–π–ª!
SECRET_KEY = "your-secret-key-change-in-production"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
REFRESH_TOKEN_EXPIRE_DAYS = 7


# ============== –°–û–ó–î–ê–ù–ò–ï –¢–û–ö–ï–ù–û–í ==============

def create_access_token(data: dict, expires_delta: timedelta = None) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å JWT access token.

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, {"sub": user_id})
        expires_delta: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞

    Returns:
        JWT —Ç–æ–∫–µ–Ω (—Å—Ç—Ä–æ–∫–∞)
    """
    to_encode = data.copy()

    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)

    to_encode.update({"exp": expire, "token_type": "access"})

    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def create_refresh_token(data: dict) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å JWT refresh token.

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, {"sub": user_id})

    Returns:
        JWT —Ç–æ–∫–µ–Ω (—Å—Ç—Ä–æ–∫–∞)
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)

    to_encode.update({"exp": expire, "token_type": "refresh"})

    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


# ============== –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–û–í ==============

async def get_current_user(
        credentials: HTTPAuthorizationCredentials = Depends(security),
        db: AsyncSession = Depends(get_db)
) -> User:
    """
    ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT access token.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ Depends() –≤ –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö —Ä–æ—É—Ç–∞—Ö.

    –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç:
        - HTTPException(401): –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π
        - HTTPException(404): –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    token = credentials.credentials

    # ============ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ ============
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    except JWTError as e:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid or expired token",
            headers={"WWW-Authenticate": "Bearer"}
        )

    # ============ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã payload ============
    user_id: str = payload.get("sub")
    token_type: str = payload.get("token_type")

    # ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ token_type == "access", –Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ!
    # ‚úÖ –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if not user_id:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token: missing user_id"
        )

    if token_type != "access":
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token: not an access token"
        )

    # ============ 3. –ü–∞—Ä—Å–∏–Ω–≥ UUID ============
    try:
        user_id_uuid = UUID(user_id)
    except ValueError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token: user_id is not a valid UUID"
        )

    # ============ 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î ============
    user_repo = UserRepository(db)
    user = await user_repo.get_user_by_id(user_id_uuid)

    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="User not found"
        )

    return user


# ============== –ü–†–û–í–ï–†–ö–ê –†–û–õ–ï–ô ==============

def require_role(allowed_roles: Union[str, List[str]]):
    """
    üéØ –§–∞–±—Ä–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π.

    Args:
        allowed_roles: –°—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π

    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        @router.post("", dependencies=[Depends(require_role("ADMIN"))])
        @router.post("", dependencies=[Depends(require_role(["TEACHER", "ADMIN"]))])

    Returns:
        Async —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ä–æ–ª–∏
    if isinstance(allowed_roles, str):
        normalized_roles = [allowed_roles.upper()]
    else:
        normalized_roles = [role.upper() for role in allowed_roles]

    async def role_checker(current_user: User = Depends(get_current_user)) -> User:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –æ–¥–Ω—É –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π."""
        user_role = current_user.role.upper()

        # ‚úÖ –ü—Ä–∞–≤–∏–ª–æ: ADMIN –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≤—Å—ë, —á—Ç–æ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å TEACHER
        if user_role == "ADMIN":
            return current_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
        if user_role not in normalized_roles:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"Access denied. Required roles: {', '.join(normalized_roles)}"
            )

        return current_user

    return role_checker


# ============== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ==============

async def get_current_admin_user(
        current_user: User = Depends(require_role("ADMIN"))
) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏ ADMIN.

    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dependencies=[Depends(require_role("ADMIN"))]
    """
    return current_user


async def get_current_teacher_user(
        current_user: User = Depends(require_role(["TEACHER", "ADMIN"]))
) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏ TEACHER –∏–ª–∏ ADMIN.

    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dependencies=[Depends(require_role(["TEACHER", "ADMIN"]))]
    """
    return current_user


async def get_current_student_user(
        current_user: User = Depends(require_role("STUDENT"))
) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏ STUDENT.
    """
    return current_user