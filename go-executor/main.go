package main

import (
	"log"
	"net/http"
	"fmt"
	"go-executor/pkg/router"
	"go-executor/pkg/service"
	"go-executor/pkg/judger"
)

const listenPort = "8001"

func main() {
	// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Judger (—Å–≤—è–∑—å —Å Docker)
	judger, err := judger.NewDockerJudger()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Judger (Docker): %v", err)
	}

	// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –°–µ—Ä–≤–∏—Å–∞ (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
	submissionService := service.NewSubmissionService(judger)

	// 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –†–æ—É—Ç–µ—Ä–∞ (HTTP-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ)
	appRouter := router.NewRouter(submissionService)

	// 4. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
	mux := http.NewServeMux()
	appRouter.RegisterRoutes(mux)

	// 5. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	serverAddr := fmt.Sprintf(":%s", listenPort)
	log.Printf("üî• Go Code Executor –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", serverAddr)
	
	err = http.ListenAndServe(serverAddr, mux)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}